{
  "my_trampoline_test" : "(deftest test-78\r\n  (is (= (letfn [(triple [x] #(sub-two (* 3 x)))\r\n                 (sub-two [x] #(stop? (- x 2)))\r\n                 (stop? [x] (if (> x 50) x #(triple x)))]\r\n           (my-trampoline triple 2)) 82))\r\n  (is (= (letfn [(my-even? [x] (if (zero? x) true #(my-odd? (dec x))))\r\n                 (my-odd? [x] (if (zero? x) false #(my-even? (dec x))))]\r\n           (map (partial my-trampoline my-even?) (range 6)))\r\n         [true false true false true false])))",
  "double_test" : "(deftest double-test\r\n  (is (= (f 2) 4))\r\n  (is (= (f 3) 6))\r\n  (is (= (f 11) 22))\r\n  (is (= (f 7) 14)))",
  "tree_test" : "(deftest test-95\r\n  (is (= (tree? '(:a (:b nil nil) nil))\r\n         true))\r\n  (is (= (tree? '(:a (:b nil nil)))\r\n         false))\r\n  (is (= (tree? [1 nil [2 [3 nil nil] [4 nil nil]]])\r\n         true))\r\n  (is (= (tree? [1 [2 nil nil] [3 nil nil] [4 nil nil]])\r\n         false))\r\n  (is (= (tree? [1 [2 [3 [4 nil nil] nil] nil] nil])\r\n         true))\r\n  (is (= (tree? [1 [2 [3 [4 false nil] nil] nil] nil])\r\n         false))\r\n  (is (= (tree? '(:a nil ()))\r\n         false))\r\n  (is (= (tree? '(:a nil ()))\r\n         false)))",
  "factorial_test" : "(deftest test-42\r\n  (is (= (factorial 1) 1))\r\n  (is (= (factorial 3) 6))\r\n  (is (= (factorial 5) 120))\r\n  (is (= (factorial 8) 40320)))",
  "find_path_test" : "(deftest test-106\r\n  (is (= 1 (find-path 1 1)))\r\n  (is (= 3 (find-path 3 12)))\r\n  (is (= 3 (find-path 12 3)))\r\n  (is (= 3 (find-path 5 9)))\r\n  (is (= 9 (find-path 9 2)))\r\n  (is (= 5 (find-path 9 12))))",
  "truth_test" : "(deftest equality-test\r\n  (is (true? truth)))",
  "myjuxt_test" : "(deftest test-59\r\n  (is (= [21 6 1] ((myjuxt + max min) 2 3 5 1 6 4)))\r\n  (is (= [\"HELLO\" 5] ((myjuxt #(.toUpperCase %) count) \"hello\")))\r\n  (is (= [2 6 4] ((myjuxt :a :c :b) {:a 2, :b 4, :c 6, :d 8 :e 10})))) ",
  "my_group_by_test" : "(deftest test-63\r\n  (is (= (my-group-by #(> % 5) #{1 3 6 8}) {false [1 3], true [6 8]}))\r\n  (is (= (my-group-by #(apply / %) [[1 2] [2 4] [4 6] [3 6]]) {1/2 [[1 2] [2 4] [3 6]], 2/3 [[4 6]]}))\r\n  (is (= (my-group-by count [[1] [1 2] [3] [1 2 3] [2 3]]) {1 [[1] [3]], 2 [[1 2] [2 3]], 3 [[1 2 3]]})))",
  "lt_test" : "(deftest test-127\r\n  (is (= 10 (lt [15 15 15 15 15])))\r\n; 1111      1111\r\n; 1111      *111\r\n; 1111  ->  **11\r\n; 1111      ***1\r\n; 1111      ****\r\n  (is (= 15 (lt [1 3 7 15 31])))\r\n; 00001      0000*\r\n; 00011      000**\r\n; 00111  ->  00***\r\n; 01111      0****\r\n; 11111      *****\r\n  (is (= 3 (lt [3 3])))\r\n; 11      *1\r\n; 11  ->  **\r\n  (is (= 4 (lt [7 3])))\r\n; 111      ***\r\n; 011  ->  0*1\r\n  (is (= 6 (lt [17 22 6 14 22])))\r\n; 10001      10001\r\n; 10110      101*0\r\n; 00110  ->  00**0\r\n; 01110      0***0\r\n; 10110      10110\r\n  (is (= 9 (lt [18 7 14 14 6 3])))\r\n; 10010      10010\r\n; 00111      001*0\r\n; 01110      01**0\r\n; 01110  ->  0***0\r\n; 00110      00**0\r\n; 00011      000*1\r\n  (is (= nil (lt [21 10 21 10])))\r\n; 10101      10101\r\n; 01010      01010\r\n; 10101  ->  10101\r\n; 01010      01010\r\n  (is (= nil (lt [0 31 0 31 0]))))\r\n; 00000      00000\r\n; 11111      11111\r\n; 00000  ->  00000\r\n; 11111      11111\r\n; 00000      00000",
  "maps_test" : "(deftest maps-test\r\n  (is (= n ((hash-map :a 10, :b 20, :c 30) :b)))\r\n  (is (= n (:b {:a 10, :b 20, :c 30}))))",
  "deinterleave_test" : "(deftest test-43\r\n  (is (= (deinterleave [1 2 3 4 5 6] 2) '((1 3 5) (2 4 6))))\r\n  (is (= (deinterleave (range 9) 3) '((0 3 6) (1 4 7) (2 5 8))))\r\n  (is (= (deinterleave (range 10) 5) '((0 5) (1 6) (2 7) (3 8) (4 9)))))",
  "conway_test" : "(deftest test-94\r\n  (is (= (conway [\"      \"\r\n                  \" ##   \"\r\n                  \" ##   \"\r\n                  \"   ## \"\r\n                  \"   ## \"\r\n                  \"      \"])\r\n         [\"      \"\r\n          \" ##   \"\r\n          \" #    \"\r\n          \"    # \"\r\n          \"   ## \"\r\n          \"      \"]))\r\n  (is (= (conway [\"     \"\r\n                  \"     \"\r\n                  \" ### \"\r\n                  \"     \"\r\n                  \"     \"]))\r\n      [\"     \"\r\n       \"  #  \"\r\n       \"  #  \"\r\n       \"  #  \"\r\n       \"     \"])\r\n  (is (= (conway [\"      \"\r\n                  \"      \"\r\n                  \"  ### \"\r\n                  \" ###  \"\r\n                  \"      \"\r\n                  \"      \"])\r\n         [\"      \"\r\n          \"   #  \"\r\n          \" #  # \"\r\n          \" #  # \"\r\n          \"  #   \"\r\n          \"      \"])))",
  "hack_test" : "(deftest test-49\r\n  (is (= (hack 3 [1 2 3 4 5 6]) [[1 2 3] [4 5 6]]))\r\n  (is (= (hack 1 [:a :b :c :d]) [[:a] [:b :c :d]]))\r\n  (is (= (hack 2 [[1 2] [3 4] [5 6]]) [[[1 2] [3 4]] [[5 6]]])))",
  "myrange_test" : "(deftest test-34\r\n  (is (= (myrange 1 4) '(1 2 3)))\r\n  (is (= (myrange -2 2) '(-2 -1 0 1)))\r\n  (is (= (myrange 5 8) '(5 6 7))))",
  "drop_every_nth_test" : "(deftest test-41\r\n  (is (= (drop-every-nth [1 2 3 4 5 6 7 8] 3) [1 2 4 5 7 8]))\r\n  (is (= (drop-every-nth [:a :b :c :d :e :f] 2) [:a :c :e]))\r\n  (is (= (drop-every-nth [1 2 3 4 5 6] 4) [1 2 3 5 6])))",
  "myreductions_test" : "(deftest test-60\r\n  (is (= (take 5 (my-reductions + (range))) [0 1 3 6 10]))\r\n  (is (= (my-reductions conj [1] [2 3 4]) [[1] [1 2] [1 2 3] [1 2 3 4]]))\r\n  (is (= (last (my-reductions * 2 [3 4 5])) (reduce * 2 [3 4 5]) 120)))",
  "ttt_test" : "(deftest test-73\r\n  (is (= nil (ttt [[:e :e :e] [:e :e :e] [:e :e :e]])))\r\n  (is (= :x (ttt [[:x :e :o] [:x :e :e] [:x :e :o]])))\r\n  (is (= :o (ttt [[:e :x :e] [:o :o :o] [:x :e :x]])))\r\n  (is (= nil (ttt [[:x :e :o] [:x :x :e] [:o :x :o]])))\r\n  (is (= :x (ttt [[:x :e :e] [:o :x :e] [:o :e :x]])))\r\n  (is (= :o (ttt [[:x :e :o] [:x :o :e] [:o :e :x]])))\r\n  (is (= nil (ttt [[:x :o :x] [:x :o :x] [:o :x :o]]))))",
  "pack_test" : "(deftest test-31\r\n  (is (= (pack [1 1 2 1 1 1 3 3]) '((1 1) (2) (1 1 1) (3 3))))\r\n  (is (= (pack [:a :a :b :b :c]) '((:a :a) (:b :b) (:c))))\r\n  (is (= (pack [[1 2] [1 2] [3 4]]) '(([1 2] [1 2]) ([3 4])))))",
  "bal_num_test" : "(deftest test-115\r\n  (is (= true (bal-num 11)))\r\n  (is (= true (bal-num 121)))\r\n  (is (= false (bal-num 123)))\r\n  (is (= true (bal-num 0)))\r\n  (is (= false (bal-num 88099)))\r\n  (is (= true (bal-num 89098)))\r\n  (is (= true (bal-num 89089)))\r\n  (is (= (take 20 (filter bal-num (range)))\r\n         [0 1 2 3 4 5 6 7 8 9 11 22 33 44 55 66 77 88 99 101])))",
  "digits_test" : "(deftest test-99\r\n  (is (= (digits 1 1) [1]))\r\n  (is (= (digits 99 9) [8 9 1]))\r\n  (is (= (digits 999 99) [9 8 9 0 1])))",
  "lev_test" : "(deftest test-101\r\n  (is (= (lev \"kitten\" \"sitting\") 3))\r\n  (is (= (lev \"closure\" \"clojure\") (lev \"clojure\" \"closure\") 1))\r\n  (is (= (lev \"xyx\" \"xyyyx\") 2))\r\n  (is (= (lev \"\" \"123456\") 6))\r\n  (is (= (lev \"Clojure\" \"Clojure\") (lev \"\" \"\") (lev [] []) 0))\r\n  (is (= (lev [1 2 3 4] [0 2 3 4 5]) 2))\r\n  (is (= (lev '(:a :b :c :d) '(:a :d)) 2))\r\n  (is (= (lev \"ttttattttctg\" \"tcaaccctaccat\") 10))\r\n  (is (= (lev \"gaattctaatctc\" \"caaacaaaaaattt\") 9)))",
  "vectors_test" : "(deftest vectors-test\r\n  (is (= v (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))))",
  "totient_test" : "(deftest test-75\r\n  (is (= (totient 1) 1))\r\n  (is (= (totient 10) (count '(1 3 7 9)) 4))\r\n  (is (= (totient 40) 16))\r\n  (is (= (totient 99) 60)))",
  "primes_test" : "(deftest test-67\r\n  (is (= (primes 2) [2 3]))\r\n  (is (= (primes 5) [2 3 5 7 11]))\r\n  (is (= (last (primes 100)) 541)))",
  "tri_path_test" : "(deftest test-79\r\n  (is (= (tri-path [[1] [2 4] [5 1 4] [2 3 4 5]]) (+ 1 2 1 3) 7))\r\n  (is (= (tri-path [[3] [2 4] [1 9 3] [9 9 2 4] [4 6 6 7 8] [5 7 3 5 1 4]]) (+ 3 4 3 2 7 1) 20)))",
  "getcaps_test" : "(deftest test-29\r\n  (is (= (getcaps \"HeLlO, WoRlD!\") \"HLOWRD\"))\r\n  (is (empty? (getcaps \"nothing\")))\r\n  (is (= (getcaps \"$#A(*&987Zf\") \"AZ\")))",
  "reverse_seq_test" : "(deftest test-23\r\n  (is (= (reverse-seq [1 2 3 4 5]) [5 4 3 2 1]))\r\n  (is (= (reverse-seq (sorted-set 5 7 2 7)) '(7 5 2)))\r\n  (is (= (reverse-seq [[1 2] [3 4] [5 6]]) [[5 6] [3 4] [1 2]])))",
  "uce_test" : "(deftest test-121\r\n  (is (= 2 ((uce '(/ a b))\r\n            '{b 8 a 16})))\r\n  (is (= 8 ((uce '(+ a b 2))\r\n            '{a 2 b 4})))\r\n  (is (= [6 0 -4]\r\n         (map (uce '(* (+ 2 a)\r\n                       (- 10 b)))\r\n              '[{a 1 b 8}\r\n                {b 5 a -2}\r\n                {a 2 b 11}])))\r\n  (is (= 1 ((uce '(/ (+ x 2)\r\n                     (* 3 (+ y 1))))\r\n            '{x 4 y 1}))))",
  "conj_list_test" : "(deftest conj-list-test\r\n  (is (= l (conj '(2 3 4) 1)))\r\n  (is (= l (conj '(3 4) 2 1))))",
  "set_sect_test" : "(deftest test-81\r\n  (is (= (set-sect #{0 1 2 3} #{2 3 4 5}) #{2 3}))\r\n  (is (= (set-sect #{0 1 2} #{3 4 5}) #{}))\r\n  (is (= (set-sect #{:a :b :c :d} #{:c :e :a :f :d}) #{:a :c :d})))",
  "perfect_nums_test" : "(deftest test-80\r\n  (is (= (perfect-nums 6) true))\r\n  (is (= (perfect-nums 7) false))\r\n  (is (= (perfect-nums 496) true))\r\n  (is (= (perfect-nums 500) false))\r\n  (is (= (perfect-nums 8128) true)))",
  "gtw_test" : "(deftest test-114\r\n  (is (= [2 3 5 7 11 13]\r\n         (gtw 4 #(= 2 (mod % 3))\r\n              [2 3 5 7 11 13 17 19 23])))\r\n  (is (= [\"this\" \"is\" \"a\" \"sentence\"]\r\n         (gtw 3 #(some #{\\i} %)\r\n              [\"this\" \"is\" \"a\" \"sentence\" \"i\" \"wrote\"])))\r\n  (is (= [\"this\" \"is\"]\r\n         (gtw 1 #{\"a\"}\r\n              [\"this\" \"is\" \"a\" \"sentence\" \"i\" \"wrote\"]))))",
  "filter_test" : "(deftest filter-test\r\n  (is (= l (filter #(> % 5) '(3 4 5 6 7)))))",
  "my_interleave_test" : "(deftest test-39\r\n  (is (= (my-interleave [1 2 3] [:a :b :c]) '(1 :a 2 :b 3 :c)))\r\n  (is (= (my-interleave [1 2] [3 4 5 6]) '(1 3 2 4)))\r\n  (is (= (my-interleave [1 2 3 4] [5]) [1 5]))\r\n  (is (= (my-interleave [30 20] [25 15]) [30 25 20 15])))",
  "ps_test" : "(deftest test-116\r\n  (is (= false (ps 4)))\r\n  (is (= true (ps 563)))\r\n  (is (= 1103 (nth (filter ps (range)) 15))))",
  "powerset_test" : "(deftest test-85\r\n  (is (= (powerset #{1 :a}) #{#{1 :a} #{:a} #{} #{1}}))\r\n  (is (= (powerset #{}) #{#{}}))\r\n  (is (= (powerset #{1 2 3}) #{#{} #{1} #{2} #{3} #{1 2} #{1 3} #{2 3} #{1 2 3}}))\r\n  (is (= (count (powerset (into #{} (range 10)))) 1024)))",
  "closure_test" : "(deftest test-107\r\n  (is (= 256 ((closure 2) 16), ((closure 8) 2)))\r\n  (is (= [1 8 27 64] (map (closure 3) [1 2 3 4])))\r\n  (is (= [1 2 4 8 16] (map #((closure %) 2) [0 1 2 3 4]))))",
  "quine_test" : "(deftest test-125\r\n  (is (= (str '(fn [x] (str x x))\r\n              '(fn [x] (str x x)))\r\n         ((fn [x] (str x x))\r\n          '(fn [x] (str x x))))))",
  "pascal_test" : "(deftest test-97\r\n  (is (= (pascal 1) [1]))\r\n  (is (= (map pascal (range 1 6))\r\n         [[1]\r\n          [1 1]\r\n          [1 2 1]\r\n          [1 3 3 1]\r\n          [1 4 6 4 1]]))\r\n  (is (= (pascal 11)\r\n         [1 10 45 120 210 252 210 120 45 10 1])))",
  "conj_set_test" : "(deftest conj-set-test\r\n  (is (= #{1 2 3 4} (conj #{1 4 3} n))))",
  "anagram_test" : "(deftest test-77\r\n  (is (= (anagram [\"meat\" \"mat\" \"team\" \"mate\" \"eat\"]) #{#{\"meat\" \"team\" \"mate\"}}))\r\n  (is (= (anagram [\"veer\" \"lake\" \"item\" \"kale\" \"mite\" \"ever\"]) #{#{\"veer\" \"ever\"} #{\"lake\" \"kale\"} #{\"mite\" \"item\"}})))",
  "trans_closure_test" : "(deftest test-84\r\n  (is (let [divides #{[8 4] [9 3] [4 2] [27 9]}]\r\n        (= (trans-closure divides) #{[4 2] [8 4] [8 2] [9 3] [27 9] [27 3]})))\r\n  (is (let [more-legs\r\n            #{[\"cat\" \"man\"] [\"man\" \"snake\"] [\"spider\" \"cat\"]}]\r\n        (= (trans-closure more-legs)\r\n           #{[\"cat\" \"man\"] [\"cat\" \"snake\"] [\"man\" \"snake\"]\r\n             [\"spider\" \"cat\"] [\"spider\" \"man\"] [\"spider\" \"snake\"]})))\r\n  (is (let [progeny\r\n            #{[\"father\" \"son\"] [\"uncle\" \"cousin\"] [\"son\" \"grandson\"]}]\r\n        (= (trans-closure progeny)\r\n           #{[\"father\" \"son\"] [\"father\" \"grandson\"]\r\n             [\"uncle\" \"cousin\"] [\"son\" \"grandson\"]}))))",
  "ttt2_test" : "(deftest test-119\r\n  (is (= (ttt :x [[:o :e :e]\r\n                  [:o :x :o]\r\n                  [:x :x :e]])\r\n         #{[2 2] [0 1] [0 2]}))\r\n  (is (= (ttt :x [[:x :o :o]\r\n                  [:x :x :e]\r\n                  [:e :o :e]])\r\n         #{[2 2] [1 2] [2 0]}))\r\n  (is (= (ttt :x [[:x :e :x]\r\n                  [:o :x :o]\r\n                  [:e :o :e]])\r\n         #{[2 2] [0 1] [2 0]}))\r\n  (is (= (ttt :x [[:x :x :o]\r\n                  [:e :e :e]\r\n                  [:e :e :e]])\r\n         #{}))\r\n  (is (= (ttt :o [[:x :x :o]\r\n                  [:o :e :o]\r\n                  [:x :e :e]])\r\n         #{[2 2] [1 1]})))",
  "map_test" : "(deftest map-test\r\n  (is (= l (map #(+ % 5) '(1 2 3))))",
  "f_test" : "(deftest test-117\r\n  (is (= true  (f [\"M   C\"])))\r\n  (is (= false (f [\"M # C\"])))\r\n  (is (= true  (f [\"#######\"\r\n                   \"#     #\"\r\n                   \"#  #  #\"\r\n                   \"#M # C#\"\r\n                   \"#######\"])))\r\n  (is (= false (f [\"########\"\r\n                   \"#M  #  #\"\r\n                   \"#   #  #\"\r\n                   \"# # #  #\"\r\n                   \"#   #  #\"\r\n                   \"#  #   #\"\r\n                   \"#  # # #\"\r\n                   \"#  #   #\"\r\n                   \"#  #  C#\"\r\n                   \"########\"])))\r\n  (is (= false (f [\"M     \"\r\n                   \"      \"\r\n                   \"      \"\r\n                   \"      \"\r\n                   \"    ##\"\r\n                   \"    #C\"])))\r\n  (is (= true  (f [\"C######\"\r\n                   \" #     \"\r\n                   \" #   # \"\r\n                   \" #   #M\"\r\n                   \"     # \"])))\r\n  (is (= true  (f [\"C# # # #\"\r\n                   \"        \"\r\n                   \"# # # # \"\r\n                   \"        \"\r\n                   \" # # # #\"\r\n                   \"        \"\r\n                   \"# # # #M\"]))))",
  "fib_test" : "(deftest test-26\r\n  (is (= (take 1 (fib 0 1)) '(0)))\r\n  (is (= (take 2 (fib 0 1)) '(0 1)))\r\n  (is (= (take 3 (fib 0 1)) '(0 1 1)))\r\n  (is (= (take 4 (fib 0 1)) '(0 1 1 2)))\r\n  (is (= (take 5 (fib 0 1)) '(0 1 1 2 3)))\r\n  (is (= (take 6 (fib 0 1)) '(0 1 1 2 3 5)))\r\n  (is (= (take 7 (fib 0 1)) '(0 1 1 2 3 5 8)))\r\n  (is (= (take 8 (fib 0 1)) '(0 1 1 2 3 5 8 13)))\r\n  (is (= (take 9 (fib 0 1)) '(0 1 1 2 3 5 8 13 21)))\r\n  (is (= (take 10 (fib 0 1)) '(0 1 1 2 3 5 8 13 21 34))))",
  "intervals_test" : "(deftest test-171\r\n  (is (= (intervals [1 2 3]) [[1 3]]))\r\n  (is (= (intervals [10 9 8 1 2 3]) [[1 3] [8 10]]))\r\n  (is (= (intervals [1 1 1 1 1 1 1]) [[1 1]]))\r\n  (is (= (intervals []) []))\r\n  (is (= (intervals [19 4 17 1 3 10 2 13 13 2 16 4 2 15 13 9 6 14 2 11])\r\n         [[1 4] [6 6] [9 11] [13 17] [19 19]])))",
  "conj_map_test" : "(deftest conj-map-test\r\n  (is (= {:a 1, :b 2, :c 3} (conj {:a 1} kv [:c 3]))))",
  "functions_test" : "(deftest functions-test\r\n  (is (= n ((fn add-five [x] (+ x 5)) 3)))\r\n  (is (= n ((fn [x] (+ x 5)) 3)))\r\n  (is (= n (#(+ % 5) 3)))\r\n  (is (= n ((partial + 5) 3))))",
  "db_test" : "(deftest test-137\r\n  (is (= [1 2 3 4 5 0 1] (digits 1234501 10)))\r\n  (is (= [0] (digits 0 11)))\r\n  (is (= [1 0 0 1] (digits 9 2)))\r\n  (is (= [1 0] (let [n (rand-int 100000)] (digits n n))))\r\n  (is (= [16 18 5 24 15 1] (digits Integer/MAX_VALUE 42))))",
  "compress_test" : "(deftest test-30\r\n  (is (= (apply str (compress \"Leeeeeerrroyyy\")) \"Leroy\"))\r\n  (is (= (compress [1 1 2 3 3 2 2 3]) '(1 2 3 2 3)))\r\n  (is (= (compress [[1 2] [1 2] [3 4] [1 2]]) '([1 2] [3 4] [1 2]))))",
  "lcm_test" : "(deftest test-100\r\n  (is (== (lcm 2 3) 6))\r\n  (is (== (lcm 5 3 7) 105))\r\n  (is (== (__ 1/3 2/5) 2))\r\n  (is (== (__ 3/4 1/6) 3/2))\r\n  (is (== (__ 7 5/7 2 3/5) 210)))",
  "penultimate_test" : "(deftest test-20\r\n  (is (= (penultimate (list 1 2 3 4 5)) 4))\r\n  (is (= (penultimate [\"a\" \"b\" \"c\"]) \"b\"))\r\n  (is (= (penultimate [[1 2] [3 4]]) [1 2])))",
  "classes_test" : "(deftest test-98\r\n  (is (= (classes #(* % %) #{-2 -1 0 1 2})\r\n         #{#{0} #{1 -1} #{2 -2}}))\r\n  (is (= (classes #(rem % 3) #{0 1 2 3 4 5})\r\n         #{#{0 3} #{1 4} #{2 5}}))\r\n  (is (= (classes identity #{0 1 2 3 4})\r\n         #{#{0} #{1} #{2} #{3} #{4}}))\r\n  (is (= (classes (constantly true) #{0 1 2 3 4})\r\n         #{#{0 1 2 3 4}})))",
  "maths_test" : "(deftest maths-test\r\n  (is (true? expr))",
  "happy_test" : "(deftest test-86\r\n  (is (= (happy 7) true))\r\n  (is (= (happy 986543210) true))\r\n  (is (= (happy 2) false))\r\n  (is (= (happy 3) false)))",
  "makeflat_test" : "(deftest test-28\r\n  (is (= (makeflat '((1 2) 3 [4 [5 6]])) '(1 2 3 4 5 6)))\r\n  (is (= (makeflat [\"a\" [\"b\"] \"c\"]) '(\"a\" \"b\" \"c\")))\r\n  (is (= (makeflat '((((:a))))) '(:a))))",
  "word_sort_test" : "(deftest test-70\r\n  (is (= (word-sort  \"Have a nice day.\")\r\n         [\"a\" \"day\" \"Have\" \"nice\"]))\r\n  (is (= (word-sort  \"Clojure is a fun language!\")\r\n         [\"a\" \"Clojure\" \"fun\" \"is\" \"language\"]))\r\n  (is (= (word-sort  \"Fools fall for foolish follies.\")\r\n         [\"fall\" \"follies\" \"foolish\" \"Fools\" \"for\"])))",
  "sym_diff_test" : "(deftest test-88\r\n  (is (= (sym-diff #{1 2 3 4 5 6} #{1 3 5 7}) #{2 4 6 7}))\r\n  (is (= (sym-diff #{:a :b :c} #{}) #{:a :b :c}))\r\n  (is (= (sym-diff #{} #{4 5 6}) #{4 5 6}))\r\n  (is (= (sym-diff #{[1 2] [2 3]} #{[2 3] [3 4]}) #{[1 2] [3 4]})))",
  "count_elements_test" : "(deftest test-22\r\n  (is (= (count-elements '(1 2 3 3 1)) 5))\r\n  (is (= (count-elements \"Hello World\") 11))\r\n  (is (= (count-elements [[1 2] [3 4] [5 6]]) 3))\r\n  (is (= (count-elements '(13)) 1))\r\n  (is (= (count-elements '(:a :b :c)) 3)))",
  "conj_vector_test" : "(deftest conj-vectors-test\r\n  (is (= v (conj [1 2 3] 4)))\r\n  (is (= v (conj [1 2] 3 4))))",
  "roman_test" : "(deftest test-104\r\n  (is (= \"I\" (roman 1)))\r\n  (is (= \"I\" (roman 1)))\r\n  (is (= \"XXX\" (roman 30)))\r\n  (is (= \"IV\" (roman 4)))\r\n  (is (= \"CXL\" (roman 140)))\r\n  (is (= \"DCCCXXVII\" (roman 827)))\r\n  (is (= \"MMMCMXCIX\" (roman 3999)))\r\n  (is (= \"XLVIII\" (roman 48))))",
  "camel_test" : "(deftest test-102\r\n  (is (= (camel \"something\") \"something\"))\r\n  (is (= (camel \"multi-word-key\") \"multiWordKey\"))\r\n  (is (= (camel \"leaveMeAlone\") \"leaveMeAlone\")))",
  "strings_test" : "(deftest strings-test\r\n  (is (= \"HELLO\" s)))",
  "rn_test" : "(deftest test-92\r\n  (is (= 14 (rn \"XIV\")))\r\n  (is (= 827 (rn \"DCCCXXVII\")))\r\n  (is (= 3999 (rn \"MMMCMXCIX\")))\r\n  (is (= 48 (rn \"XLVIII\"))))",
  "cards_test" : "(deftest test-128\r\n  (is (= {:suit :diamond :rank 10} (cards \"DQ\")))\r\n  (is (= {:suit :heart :rank 3} (cards \"H5\")))\r\n  (is (= {:suit :club :rank 12} (cards \"CA\")))\r\n  (is (= (range 13) (map (comp :rank cards str)\r\n                         '[S2 S3 S4 S5 S6 S7\r\n                           S8 S9 ST SJ SQ SK SA]))))",
  "half_truth_test" : "(deftest test-83\r\n  (is (= false (half-truth false false)))\r\n  (is (= true (half-truth true false)))\r\n  (is (= false (half-truth true)))\r\n  (is (= true (half-truth false true false)))\r\n  (is (= false (half-truth true true true)))\r\n  (is (= true (half-truth true true true false))))",
  "perfect_square_test" : "(deftest test-74\r\n  (is (= (perfect-square \"4,5,6,7,8,9\") \"4,9\"))\r\n  (is (= (perfect-square \"15,16,25,36,37\") \"16,25,36\")))",
  "pf_test" : "(deftest test-93\r\n  (is (= (pf [[\"Do\"] [\"Nothing\"]])\r\n         [[\"Do\"] [\"Nothing\"]]))\r\n  (is (= (pf [[[[:a :b]]] [[:c :d]] [:e :f]])\r\n         [[:a :b] [:c :d] [:e :f]]))\r\n  (is (= (pf '((1 2) ((3 4) ((((5 6)))))))\r\n         '((1 2) (3 4) (5 6)))))",
  "nth_element_test" : "(deftest test-21\r\n  (is (= (nth-element '(4 5 6 7) 2) 6))\r\n  (is (= (nth-element [:a :b :c] 0) :a))\r\n  (is (= (nth-element [1 2 3 4] 1) 2))\r\n  (is (= (nth-element '([1 2] [3 4] [5 6]) 2) [5 6])))",
  "mycomp_test" : "(deftest test-58\r\n  (is (= [3 2 1] ((mycomp rest reverse) [1 2 3 4])))\r\n  (is (= 5 ((mycomp (partial + 3) second) [1 2 3 4])))\r\n  (is (= true ((mycomp zero? #(mod % 8) +) 3 5 7 9)))\r\n  (is (= \"HELLO\" ((mycomp #(.toUpperCase %) #(apply str %) take) 5 \"hello world\"))))",
  "longest_subseq_test" : "(deftest test-53\r\n  (is (= (longest-subseq [1 0 1 2 3 0 4 5]) [0 1 2 3]))\r\n  (is (= (longest-subseq [5 6 1 3 2 7]) [5 6]))\r\n  (is (= (longest-subseq [2 3 3 4 5]) [3 4 5]))\r\n  (is (= (longest-subseq [7 6 5 4]) [])))",
  "flipper_test" : "(deftest test-46\r\n  (is (= 3 ((flipper nth) 2 [1 2 3 4 5])))\r\n  (is (= true ((flipper >) 7 8)))\r\n  (is (= 4 ((flipper quot) 2 8)))\r\n  (is (= [1 2 3] ((flipper take) [1 2 3 4 5] 3))))",
  "mypal_test" : "(deftest test-27\r\n  (is (false? (mypal '(1 2 3 4 5))))\r\n  (is (true? (mypal \"racecar\")))\r\n  (is (true? (mypal [:foo :bar :foo])))\r\n  (is (true? (mypal '(1 1 3 3 1 1))))\r\n  (is (false? (mypal '(:a :b :c)))))",
  "eulerian_test" : "(deftest test-89\r\n  (is (= true (eulerian [[:a :b]])))\r\n  (is (= false (eulerian [[:a :a] [:b :b]])))\r\n  (is (= false (eulerian [[:a :b] [:a :b] [:a :c] [:c :a]\r\n                          [:a :d] [:b :d] [:c :d]])))\r\n  (is (= true (eulerian [[1 2] [2 3] [3 4] [4 1]])))\r\n  (is (= true (eulerian [[:a :b] [:a :c] [:c :b] [:a :e]\r\n                         [:b :e] [:a :d] [:b :d] [:c :e]\r\n                         [:d :e] [:c :f] [:d :f]])))\r\n  (is (= false (eulerian [[1 2] [2 3] [2 4] [2 5]]))))",
  "split_by_type_test" : "(deftest test-50\r\n  (is (= (set (split-by-type [1 :a 2 :b 3 :c])) #{[1 2 3] [:a :b :c]}))\r\n  (is (= (set (split-by-type [:a \"foo\"  \"bar\" :b])) #{[:a :b] [\"foo\" \"bar\"]}))\r\n  (is (= (set (split-by-type [[1 2] :a [3 4] 5 6 :b])) #{[[1 2] [3 4]] [:a :b] [5 6]})))",
  "lazy_test" : "(deftest test-108\r\n  (is (= 3 (lazy [3 4 5])))\r\n  (is (= 4 (lazy [1 2 3 4 5 6 7] [0.5 3/2 4 19])))\r\n  (is (= 64 (lazy (map #(* % % %) (range))\r\n                  (filter #(zero? (bit-and % (dec %))) (range))\r\n                  (iterate inc 20))))\r\n  (is (= 7 (lazy (range) (range 0 100 7/6) [2 3 5 7 11 13]))))",
  "sh_test" : "(deftest test-112\r\n  (is (=  (sh 10 [1 2 [3 [4 5] 6] 7])\r\n          '(1 2 (3 (4)))))\r\n  (is (=  (sh 30 [1 2 [3 [4 [5 [6 [7 8]] 9]] 10] 11])\r\n          '(1 2 (3 (4 (5 (6 (7))))))))\r\n  (is (=  (sh 9 (range))\r\n          '(0 1 2 3)))\r\n  (is (=  (sh 1 [[[[[1]]]]])\r\n          '(((((1)))))))\r\n  (is (=  (sh 0 [1 2 [3 [4 5] 6] 7])\r\n          '()))\r\n  (is (=  (sh 0 [0 0 [0 [0]]])\r\n          '(0 0 (0 (0)))))\r\n  (is (=  (sh 1 [-10 [1 [2 3 [4 5 [6 7 [8]]]]]])\r\n          '(-10 (1 (2 3 (4)))))))",
  "my_merge_with_test" : "(deftest test-69\r\n  (is (= (my-merge-with * {:a 2, :b 3, :c 4} {:a 2} {:b 2} {:c 5}) {:a 4, :b 6, :c 20}))\r\n  (is (= (my-merge-with - {1 10, 2 20} {1 3, 2 10, 3 15}) {1 7, 2 10, 3 15}))\r\n  (is (= (my-merge-with concat {:a [3], :b [6]} {:a [4 5], :c [8 9]} {:b [7]}) {:a [3 4 5], :b [6 7], :c [8 9]})))",
  "veitch_test" : "(deftest test-140\r\n  (is (= (veitch #{#{'a 'B 'C 'd}\r\n                   #{'A 'b 'c 'd}\r\n                   #{'A 'b 'c 'D}\r\n                   #{'A 'b 'C 'd}\r\n                   #{'A 'b 'C 'D}\r\n                   #{'A 'B 'c 'd}\r\n                   #{'A 'B 'c 'D}\r\n                   #{'A 'B 'C 'd}})\r\n         #{#{'A 'c}\r\n           #{'A 'b}\r\n           #{'B 'C 'd}}))\r\n  (is (= (veitch #{#{'A 'B 'C 'D}\r\n                   #{'A 'B 'C 'd}})\r\n         #{#{'A 'B 'C}}))\r\n  (is (= (veitch #{#{'a 'b 'c 'd}\r\n                   #{'a 'B 'c 'd}\r\n                   #{'a 'b 'c 'D}\r\n                   #{'a 'B 'c 'D}\r\n                   #{'A 'B 'C 'd}\r\n                   #{'A 'B 'C 'D}\r\n                   #{'A 'b 'C 'd}\r\n                   #{'A 'b 'C 'D}})\r\n         #{#{'a 'c}\r\n           #{'A 'C}}))\r\n  (is (= (veitch #{#{'a 'b 'c}\r\n                   #{'a 'B 'c}\r\n                   #{'a 'b 'C}\r\n                   #{'a 'B 'C}})\r\n         #{#{'a}}))\r\n  (is (= (veitch #{#{'a 'B 'c 'd}\r\n                   #{'A 'B 'c 'D}\r\n                   #{'A 'b 'C 'D}\r\n                   #{'a 'b 'c 'D}\r\n                   #{'a 'B 'C 'D}\r\n                   #{'A 'B 'C 'd}})\r\n         #{#{'a 'B 'c 'd}\r\n           #{'A 'B 'c 'D}\r\n           #{'A 'b 'C 'D}\r\n           #{'a 'b 'c 'D}\r\n           #{'a 'B 'C 'D}\r\n           #{'A 'B 'C 'd}}))\r\n  (is (= (veitch #{#{'a 'b 'c 'd}\r\n                   #{'a 'B 'c 'd}\r\n                   #{'A 'B 'c 'd}\r\n                   #{'a 'b 'c 'D}\r\n                   #{'a 'B 'c 'D}\r\n                   #{'A 'B 'c 'D}})\r\n         #{#{'a 'c}\r\n           #{'B 'c}}))\r\n  (is (= (veitch #{#{'a 'B 'c 'd}\r\n                   #{'A 'B 'c 'd}\r\n                   #{'a 'b 'c 'D}\r\n                   #{'a 'b 'C 'D}\r\n                   #{'A 'b 'c 'D}\r\n                   #{'A 'b 'C 'D}\r\n                   #{'a 'B 'C 'd}\r\n                   #{'A 'B 'C 'd}})\r\n         #{#{'B 'd}\r\n           #{'b 'D}}))\r\n  (is (= (veitch #{#{'a 'b 'c 'd}\r\n                   #{'A 'b 'c 'd}\r\n                   #{'a 'B 'c 'D}\r\n                   #{'A 'B 'c 'D}\r\n                   #{'a 'B 'C 'D}\r\n                   #{'A 'B 'C 'D}\r\n                   #{'a 'b 'C 'd}\r\n                   #{'A 'b 'C 'd}})\r\n         #{#{'B 'D}\r\n           #{'b 'd}}))\r\n  (is (= (veitch #{#{'a 'b 'c 'd}\r\n                   #{'A 'b 'c 'd}\r\n                   #{'a 'B 'c 'D}\r\n                   #{'A 'B 'c 'D}\r\n                   #{'a 'B 'C 'D}\r\n                   #{'A 'B 'C 'D}\r\n                   #{'a 'b 'C 'd}\r\n                   #{'A 'b 'C 'd}})\r\n         #{#{'B 'D}\r\n           #{'b 'd}})))",
  "rest_test" : "(deftest rest-test\r\n  (is (= v (rest [10 20 30 40]))))",
  "cartesian_test" : "(deftest test-90\r\n  (is (= (cartesian #{\"ace\" \"king\" \"queen\"} #{\"♠\" \"♥\" \"♦\" \"♣\"})\r\n         #{[\"ace\"   \"♠\"] [\"ace\"   \"♥\"] [\"ace\"   \"♦\"] [\"ace\"   \"♣\"]\r\n           [\"king\"  \"♠\"] [\"king\"  \"♥\"] [\"king\"  \"♦\"] [\"king\"  \"♣\"]\r\n           [\"queen\" \"♠\"] [\"queen\" \"♥\"] [\"queen\" \"♦\"] [\"queen\" \"♣\"]}))\r\n  (is (= (cartesian #{1 2 3} #{4 5})\r\n         #{[1 4] [2 4] [3 4] [1 5] [2 5] [3 5]}))\r\n  (is (= 300 (count (cartesian (into #{} (range 10))\r\n                               (into #{} (range 30)))))))",
  "shifter_test" : "(deftest test-44\r\n  (is (= (shifter 2 [1 2 3 4 5]) '(3 4 5 1 2)))\r\n  (is (= (shifter -2 [1 2 3 4 5]) '(4 5 1 2 3)))\r\n  (is (= (shifter 6 [1 2 3 4 5]) '(2 3 4 5 1)))\r\n  (is (= (shifter 1 '(:a :b :c)) '(:b :c :a)))\r\n  (is (= (shifter -4 '(:a :b :c)) '(:c :a :b))))",
  "gcd_test" : "(deftest test-66\r\n  (is (= (gcd 2 4) 2))\r\n  (is (= (gcd 10 5) 5))\r\n  (is (= (gcd 5 7) 1))\r\n  (is (= (gcd 1023 858) 33)))",
  "word_chain_test" : "(deftest test-82\r\n  (is (= true (word-chain #{\"hat\" \"coat\" \"dog\" \"cat\" \"oat\" \"cot\" \"hot\" \"hog\"})))\r\n  (is (= false (word-chain #{\"cot\" \"hot\" \"bat\" \"fat\"})))\r\n  (is (= false (word-chain #{\"to\" \"top\" \"stop\" \"tops\" \"toss\"})))\r\n  (is (= true (word-chain #{\"spout\" \"do\" \"pot\" \"pout\" \"spot\" \"dot\"})))\r\n  (is (= true (word-chain #{\"share\" \"hares\" \"shares\" \"hare\" \"are\"})))\r\n  (is (= false (word-chain #{\"share\" \"hares\" \"hare\" \"are\"}))))",
  "black_box_test" : "(deftest test-65\r\n  (is (= :map (black-box {:a 1, :b 2})))\r\n  (is (= :list (black-box (range (rand-int 20)))))\r\n  (is (= :set (black-box #{10 (rand-int 5)})))\r\n  (is (= :vector (black-box [1 2 3 4 5 6])))\r\n  (is (= [:map :set :vector :list] (map black-box [{} #{} [] ()]))))",
  "reversi_test" : "(deftest test-124\r\n  (is (= {[1 3] #{[1 2]}, [0 2] #{[1 2]}, [3 1] #{[2 1]}, [2 0] #{[2 1]}}\r\n         (reversi '[[e e e e]\r\n                    [e w b e]\r\n                    [e b w e]\r\n                    [e e e e]] 'w)))\r\n  (is (= {[3 2] #{[2 2]}, [3 0] #{[2 1]}, [1 0] #{[1 1]}}\r\n         (reversi '[[e e e e]\r\n                    [e w b e]\r\n                    [w w w e]\r\n                    [e e e e]] 'b)))\r\n  (is (= {[0 3] #{[1 2]}, [1 3] #{[1 2]}, [3 3] #{[2 2]}, [2 3] #{[2 2]}}\r\n         (reversi '[[e e e e]\r\n                    [e w b e]\r\n                    [w w b e]\r\n                    [e e b e]] 'w)))\r\n  (is (= {[0 3] #{[2 1] [1 2]}, [1 3] #{[1 2]}, [2 3] #{[2 1] [2 2]}}\r\n         (reversi '[[e e w e]\r\n                    [b b w e]\r\n                    [b w w e]\r\n                    [b w w w]] 'b)))\r\n  (is (= {[0 3] #{[2 1] [1 2]}, [1 3] #{[1 2]}, [2 3] #{[2 1] [2 2]}}\r\n         (reversi '[[e e w e]\r\n                    [b b w e]\r\n                    [b w w e]\r\n                    [b w w w]] 'b))))",
  "bin_test" : "(deftest test-122\r\n  (is (= 0     (bin \"0\")))\r\n  (is (= 7     (bin \"111\")))\r\n  (is (= 8     (bin \"1000\")))\r\n  (is (= 9     (bin \"1001\")))\r\n  (is (= 255   (bin \"11111111\")))\r\n  (is (= 1365  (bin \"10101010101\")))\r\n  (is (= 65535 (bin \"1111111111111111\"))))",
  "graph_test" : "(deftest test-91\r\n  (is (= true (graph #{[:a :a]})))\r\n  (is (= true (graph #{[:a :b]})))\r\n  (is (= false (graph #{[1 2] [2 3] [3 1]\r\n                        [4 5] [5 6] [6 4]})))\r\n  (is (= true (graph #{[1 2] [2 3] [3 1]\r\n                       [4 5] [5 6] [6 4] [3 4]})))\r\n  (is (= false (graph #{[:a :b] [:b :c] [:c :d]\r\n                        [:x :y] [:d :a] [:b :e]})))\r\n  (is (= true (graph #{[:a :b] [:b :c] [:c :d]\r\n                       [:x :y] [:d :a] [:b :e] [:x :a]}))))",
  "k_test" : "(deftest test-103\r\n  (is (= (k 1 #{4 5 6}) #{#{4} #{5} #{6}}))\r\n  (is (= (k 10 #{4 5 6}) #{}))\r\n  (is (= (k 2 #{0 1 2}) #{#{0 1} #{0 2} #{1 2}}))\r\n  (is (= (k 3 #{0 1 2 3 4}) #{#{0 1 2} #{0 1 3} #{0 1 4} #{0 2 3} #{0 2 4}\r\n                              #{0 3 4} #{1 2 3} #{1 2 4} #{1 3 4} #{2 3 4}}))\r\n  (is (= (k 4 #{[1 2 3] :a \"abc\" \"efg\"}) #{#{[1 2 3] :a \"abc\" \"efg\"}}))\r\n  (is (= (k 2 #{[1 2 3] :a \"abc\" \"efg\"}) #{#{[1 2 3] :a} #{[1 2 3] \"abc\"} #{[1 2 3] \"efg\"}\r\n                                           #{:a \"abc\"} #{:a \"efg\"} #{\"abc\" \"efg\"}})))",
  "dupseq_test" : "(deftest test-32\r\n  (is (= (dupseq [1 2 3]) '(1 1 2 2 3 3)))\r\n  (is (= (dupseq [:a :a :b :b]) '(:a :a :a :a :b :b :b :b)))\r\n  (is (= (dupseq [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4])))\r\n  (is (= (dupseq [44 33]) [44 44 33 33])))",
  "inject_test" : "(deftest test-40\r\n  (is (= (inject 0 [1 2 3]) [1 0 2 0 3]))\r\n  (is (= (apply str (inject \", \" [\"one\" \"two\" \"three\"])) \"one, two, three\"))\r\n  (is (= (inject :z [:a :b :c :d]) [:a :z :b :z :c :z :d])))",
  "seq_prons_test" : "(deftest test-110\r\n  (is (= [[1 1] [2 1] [1 2 1 1]] (take 3 (seq-prons [1]))))\r\n  (is (= [3 1 2 4] (first (seq-prons [1 1 1 4 4]))))\r\n  (is (= [1 1 1 3 2 1 3 2 1 1] (nth (seq-prons [1]) 6)))\r\n  (is (= 338 (count (nth (seq-prons [3 2]) 15)))))",
  "hello_test" : "(deftest hello-test\r\n  (is (= (hello \\\"Dave \\\") \\\"Hello, Dave!\\\"))\r\n  (is (= (hello \\\"Jenn \\\") \\\"Hello, Jenn! \\\"))\r\n  (is (= (hello \\\"Rhea \\\") \\\"Hello, Rhea! \\\")))",
  "symmetric_test" : "(deftest test-96\r\n  (is (= (symmetric? '(:a (:b nil nil) (:b nil nil))) true))\r\n  (is (= (symmetric? '(:a (:b nil nil) nil)) false))\r\n  (is (= (symmetric? '(:a (:b nil nil) (:c nil nil))) false))\r\n  (is (= (symmetric? [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]\r\n                      [2 [3 nil [4 [6 nil nil] [5 nil nil]]] nil]])\r\n         true))\r\n  (is (= (symmetric? [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]\r\n                      [2 [3 nil [4 [5 nil nil] [6 nil nil]]] nil]])\r\n         false))\r\n  (is (= (symmetric? [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]\r\n                      [2 [3 nil [4 [6 nil nil] nil]] nil]])\r\n         false)))",
  "sets_test" : "(deftest sets-test\r\n  (is (= s (set '(:a :a :b :c :c :c :c :d :d))))\r\n  (is (= s (set/union #{:a :b :c} #{:b :c :d}))))",
  "get_highest_test" : "(deftest test-38\r\n  (is (= (get-highest 1 8 3 4) 8))\r\n  (is (= (get-highest 30 20) 30))\r\n  (is (= (get-highest 45 67 11) 67)))",
  "spaz_out_test" : "(deftest test-62\r\n  (is (= (take 5 (spaz-out #(* 2 %) 1)) [1 2 4 8 16]))\r\n  (is (= (take 100 (spaz-out inc 0)) (take 100 (range))))\r\n  (is (= (take 9 (spaz-out #(inc (mod % 3)) 1)) (take 9 (cycle [1 2 3])))))",
  "seqs_test" : "(deftest seqs-test\r\n  (is (= n (first '(3 2 1))))\r\n  (is (= n (second [2 3 4])))\r\n  (is (= n (last (list 1 2 3)))))",
  "last_test" : "(deftest test-19\r\n  (is (= (my-last [1 2 3 4 5]) 5))\r\n  (is (= (my-last '(5 4 3)) 3))\r\n  (is (= (my-last [\"b\" \"c\" \"d\"]) \"d\")))",
  "splatter_test" : "(deftest test-33\r\n  (is (= (splatter [1 2 3] 2) '(1 1 2 2 3 3)))\r\n  (is (= (splatter [:a :b] 4) '(:a :a :a :a :b :b :b :b)))\r\n  (is (= (splatter [4 5 6] 1) '(4 5 6)))\r\n  (is (= (splatter [[1 2] [3 4]] 2) '([1 2] [1 2] [3 4] [3 4])))\r\n  (is (= (splatter [44 33] 2) [44 44 33 33])))",
  "make_map_test" : "(deftest test-61\r\n  (is (= (make-map [:a :b :c] [1 2 3]) {:a 1, :b 2, :c 3}))\r\n  (is (= (make-map [1 2 3 4] [\"one\" \"two\" \"three\"]) {1 \"one\", 2 \"two\", 3 \"three\"}))\r\n  (is (= (make-map [:foo :bar] [\"foo\" \"bar\" \"baz\"]) {:foo \"foo\", :bar \"bar\"})))",
  "ss_test" : "(deftest test-120\r\n  (is (= 8 (ss (range 10))))\r\n  (is (= 19 (ss (range 30))))\r\n  (is (= 50 (ss (range 100))))\r\n  (is (= 50 (ss (range 1000)))))",
  "cw_test" : "(deftest test-111\r\n  (is (= true  (cw \"the\" [\"_ # _ _ e\"])))\r\n  (is (= false (cw \"the\" [\"c _ _ _\"\r\n                          \"d _ # e\"\r\n                          \"r y _ _\"])))\r\n  (is (= true  (cw \"joy\" [\"c _ _ _\"\r\n                          \"d _ # e\"\r\n                          \"r y _ _\"])))\r\n  (is (= false (cw \"joy\" [\"c o n j\"\r\n                          \"_ _ y _\"\r\n                          \"r _ _ #\"])))\r\n  (is (= true  (cw \"clojure\" [\"_ _ _ # j o y\"\r\n                              \"_ _ o _ _ _ _\"\r\n                              \"_ _ f _ # _ _\"]))))",
  "mymap_test" : "(deftest test-118\r\n  (is (= [3 4 5 6 7]\r\n         (mymap inc [2 3 4 5 6])))\r\n  (is (= (repeat 10 nil)\r\n         (mymap (fn [_] nil) (range 10))))\r\n  (is (= [1000000 1000001]\r\n         (->> (mymap inc (range))\r\n              (drop (dec 1000000))\r\n              (take 2)))\r\n      (= [1000000 1000001]\r\n         (->> (mymap inc (range))\r\n              (drop (dec 1000000))\r\n              (take 2)))))",
  "key_val_test" : "(deftest test-105\r\n  (is (= {} (key-val [])))\r\n  (is (= {:a [1]} (key-val [:a 1])))\r\n  (is (= {:a [1], :b [2]} (key-val [:a 1, :b 2])))\r\n  (is (= {:a [1 2 3], :b [], :c [4]} (key-val [:a 1 2 3 :b :c 4]))))",
  "lists_test" : "(deftest lists-test\r\n  (is (= l '(:a :b :c))))"
}